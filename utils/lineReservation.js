const fs = require('fs').promises;
const path = require('path');
const crypto = require('crypto');

class LineReservationManager {
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ —Ñ–∞–π–ª–∞ - —Å–∫—Ä—ã—Ç–∏–µ –ª–æ–≥–∏–Ω–æ–≤/–ø–∞—Ä–æ–ª–µ–π
   * –§–æ—Ä–º–∞—Ç: URL:login:password:Orders info ‚Üí URL Orders info
   */
  static processFileLines(fileContent, hideCredentials = true) {
    const lines = fileContent.split('\n').filter(line => line.trim());
    
    if (!hideCredentials) {
      return lines; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –ª–æ–≥–∏–Ω–∞–º–∏/–ø–∞—Ä–æ–ª—è–º–∏
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ª–æ–≥–∏–Ω—ã/–ø–∞—Ä–æ–ª–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
    return lines.map(line => {
      const parts = line.split(':');
      if (parts.length >= 4) {
        // –ë–µ—Ä–µ–º URL (–ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å) –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö (–≤—Å–µ –ø–æ—Å–ª–µ 3-–≥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è)
        const url = parts[0];
        const ordersInfo = parts.slice(3).join(':');
        return `${url} ${ordersInfo}`;
      }
      return line; // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    });
  }

  /**
   * –ü–æ–∏—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ —Ç–æ–≤–∞—Ä–∞
   */
  static findLinesInFile(fileContent, selectedLines) {
    const fullLines = fileContent.split('\n').filter(line => line.trim());
    const processedLines = this.processFileLines(fileContent, true);
    const foundLines = [];
    
    selectedLines.forEach(selectedLine => {
      const selectedTrimmed = selectedLine.trim();
      
      // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
      const index = processedLines.findIndex(processedLine => 
        processedLine.trim() === selectedTrimmed
      );
      
      if (index !== -1) {
        foundLines.push({
          original: fullLines[index],
          processed: processedLines[index],
          index: index
        });
      }
    });
    
    return foundLines;
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   */
  static async validateSelectedLines(productId, userSelectedLines) {
    try {
      const { Product, ReservedLine } = require('../models');
      
      const product = await Product.findByPk(productId);
      if (!product) {
        throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const fileContent = await fs.readFile(product.filePath, 'utf8');
      const foundLines = this.findLinesInFile(fileContent, userSelectedLines);

      if (foundLines.length === 0) {
        throw new Error('–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ —Ç–æ–≤–∞—Ä–∞');
      }

      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${foundLines.length} —Å—Ç—Ä–æ–∫ –∏–∑ ${userSelectedLines.length} –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ —É–∂–µ —Å—Ç—Ä–æ–∫–∏
      for (const line of foundLines) {
        const lineHash = crypto.createHash('sha256')
          .update(`${productId}_${line.index}_${line.original}`)
          .digest('hex');

        const existingReserve = await ReservedLine.findOne({
          where: {
            lineHash,
            status: 'reserved',
            reservedUntil: { [require('sequelize').Op.gt]: new Date() }
          }
        });

        if (existingReserve) {
          throw new Error(`–°—Ç—Ä–æ–∫–∞ "${line.processed}" —É–∂–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º`);
        }
      }

      return foundLines;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫:', error);
      throw error;
    }
  }

  /**
   * –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –¢–û–õ–¨–ö–û –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (15 –º–∏–Ω—É—Ç)
   */
  static async reserveLines(userId, productId, userSelectedLines) {
    try {
      const { ReservedLine } = require('../models');
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
      const validatedLines = await this.validateSelectedLines(productId, userSelectedLines);
      
      // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ù–ê 15 –ú–ò–ù–£–¢
      const reservedLines = await ReservedLine.reserveLines(userId, productId, validatedLines);

      console.log(`‚úÖ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ ${reservedLines.length} —Å—Ç—Ä–æ–∫ –Ω–∞ 15 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      return {
        success: true,
        reservedLines,
        count: reservedLines.length,
        reservedUntil: reservedLines[0]?.reservedUntil
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  static async createReservedLinesFile(userId, productId) {
    try {
      const { ReservedLine } = require('../models');
      
      const reservedLines = await ReservedLine.findAll({
        where: {
          userId,
          productId,
          status: 'sold' // –¢–æ–ª—å–∫–æ –ü–†–û–î–ê–ù–ù–´–ï —Å—Ç—Ä–æ–∫–∏
        },
        order: [['lineIndex', 'ASC']]
      });

      if (reservedLines.length === 0) {
        throw new Error('–ù–µ—Ç –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –≤—ã–¥–∞—á–∏');
      }

      // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –ü–û–õ–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏ (–≤–∫–ª—é—á–∞—è –ª–æ–≥–∏–Ω—ã/–ø–∞—Ä–æ–ª–∏)
      const fileContent = reservedLines
        .map(line => line.lineContent) // –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –ª–æ–≥–∏–Ω–æ–º/–ø–∞—Ä–æ–ª–µ–º
        .join('\n');

      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      const tempDir = path.join(__dirname, '../temp');
      await fs.mkdir(tempDir, { recursive: true });
      
      const fileName = `purchased_lines_${userId}_${productId}_${Date.now()}.txt`;
      const filePath = path.join(tempDir, fileName);
      
      await fs.writeFile(filePath, fileContent, 'utf8');

      console.log(`üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å ${reservedLines.length} –∫—É–ø–ª–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

      return {
        filePath,
        fileName,
        count: reservedLines.length,
        content: fileContent
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
   */
  static async confirmSale(userId, productId, purchaseId) {
    try {
      const { ReservedLine } = require('../models');
      
      const confirmedCount = await ReservedLine.confirmSale(userId, productId, purchaseId);
      
      console.log(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞ ${confirmedCount} —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      return {
        success: true,
        confirmedCount
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –ù–ï —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–Ω—ã–º!
   */
  static async removeReservedLinesFromProduct(userId, productId) {
    // –í–ê–ñ–ù–û: –ù–ï –£–î–ê–õ–Ø–ï–ú —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ —Ç–æ–≤–∞—Ä–∞!
    // –§–∞–π–ª –æ—Å—Ç–∞–µ—Ç—Å—è —Ü–µ–ª—ã–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
    console.log(`‚ÑπÔ∏è –°—Ç—Ä–æ–∫–∏ –ù–ï —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞ —Ç–æ–≤–∞—Ä–∞ ${productId} - —Ç–æ–≤–∞—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º`);
    return 0;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Ä–µ–∑–µ—Ä–≤–æ–≤ (—Å—Ç–∞—Ä—à–µ 15 –º–∏–Ω—É—Ç)
   */
  static async cleanExpiredReserves() {
    try {
      const { ReservedLine } = require('../models');
      
      const expiredCount = await ReservedLine.cleanExpiredReserves();
      
      if (expiredCount > 0) {
        console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${expiredCount} –∏—Å—Ç–µ–∫—à–∏—Ö —Ä–µ–∑–µ—Ä–≤–æ–≤ (—Å—Ç–∞—Ä—à–µ 15 –º–∏–Ω—É—Ç)`);
      }
      
      return expiredCount;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Ä–µ–∑–µ—Ä–≤–æ–≤:', error);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–∑–µ—Ä–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserReservationStats(userId) {
    try {
      const { ReservedLine } = require('../models');
      
      const stats = await ReservedLine.findAll({
        where: { userId },
        attributes: [
          'status',
          [require('sequelize').fn('COUNT', require('sequelize').col('id')), 'count']
        ],
        group: ['status'],
        raw: true
      });

      const result = {
        reserved: 0,
        sold: 0,
        expired: 0,
        total: 0
      };

      stats.forEach(stat => {
        result[stat.status] = parseInt(stat.count);
        result.total += parseInt(stat.count);
      });

      return result;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–∑–µ—Ä–≤–æ–≤:', error);
      return { reserved: 0, sold: 0, expired: 0, total: 0 };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserReservedLines(userId, productId = null) {
    try {
      const { ReservedLine, Product } = require('../models');
      
      const where = {
        userId,
        status: 'reserved',
        reservedUntil: { [require('sequelize').Op.gt]: new Date() }
      };

      if (productId) {
        where.productId = productId;
      }

      return await ReservedLine.findAll({
        where,
        include: [{
          model: Product,
          attributes: ['name', 'uniqueCode', 'category']
        }],
        order: [['createdAt', 'DESC']]
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫:', error);
      return [];
    }
  }

  /**
   * –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∞ —Å—Ç—Ä–æ–∫ –Ω–∞ 15 –º–∏–Ω—É—Ç
   */
  static async extendReservation(userId, productId, minutes = 15) {
    try {
      const { ReservedLine } = require('../models');
      
      const newReservedUntil = new Date(Date.now() + minutes * 60 * 1000);
      
      const [updatedCount] = await ReservedLine.update(
        { reservedUntil: newReservedUntil },
        {
          where: {
            userId,
            productId,
            status: 'reserved'
          }
        }
      );

      console.log(`‚è∞ –ü—Ä–æ–¥–ª–µ–Ω —Ä–µ–∑–µ—Ä–≤ –Ω–∞ ${minutes} –º–∏–Ω—É—Ç –¥–ª—è ${updatedCount} —Å—Ç—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      return {
        success: true,
        updatedCount,
        newReservedUntil
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∞:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –û—Ç–º–µ–Ω–∞ —Ä–µ–∑–µ—Ä–≤–∞ —Å—Ç—Ä–æ–∫
   */
  static async cancelReservation(userId, productId) {
    try {
      const { ReservedLine } = require('../models');
      
      const [updatedCount] = await ReservedLine.update(
        { 
          status: 'expired',
          reservedUntil: new Date()
        },
        {
          where: {
            userId,
            productId,
            status: 'reserved'
          }
        }
      );

      console.log(`‚ùå –û—Ç–º–µ–Ω–µ–Ω —Ä–µ–∑–µ—Ä–≤ ${updatedCount} —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      return {
        success: true,
        cancelledCount: updatedCount
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–∑–µ—Ä–≤–∞:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–æ–≤–∞—Ä—É
   */
  static async getProductReservationStats(productId) {
    try {
      const { ReservedLine, User } = require('../models');
      
      const reservedLines = await ReservedLine.findAll({
        where: { productId },
        include: [
          { 
            model: User, 
            attributes: ['telegramId', 'username', 'firstName', 'status'] 
          }
        ],
        order: [['lineIndex', 'ASC']]
      });

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      const byUsers = {};
      const byStatus = { reserved: 0, sold: 0, expired: 0 };
      
      reservedLines.forEach(line => {
        const userId = line.userId;
        if (!byUsers[userId]) {
          byUsers[userId] = {
            user: line.User,
            lines: [],
            totalLines: 0,
            statuses: {}
          };
        }
        byUsers[userId].lines.push(line);
        byUsers[userId].totalLines++;
        
        const status = line.status;
        byUsers[userId].statuses[status] = (byUsers[userId].statuses[status] || 0) + 1;
        byStatus[status]++;
      });

      return {
        totalLines: reservedLines.length,
        byUsers: Object.values(byUsers),
        byStatus,
        activeReserves: byStatus.reserved
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞:', error);
      return {
        totalLines: 0,
        byUsers: [],
        byStatus: { reserved: 0, sold: 0, expired: 0 },
        activeReserves: 0
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static parseUserTextInput(textInput) {
    const lines = textInput.split('\n')
      .map(line => line.trim())
      .filter(line => line.length > 0);
    
    console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥: ${lines.length} —Å—Ç—Ä–æ–∫`);
    return lines;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async parseUserFileInput(fileContent) {
    try {
      const lines = fileContent.split('\n')
        .map(line => line.trim())
        .filter(line => line.length > 0);
      
      console.log(`üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª: ${lines.length} —Å—Ç—Ä–æ–∫`);
      return lines;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª');
    }
  }
}

module.exports = LineReservationManager;