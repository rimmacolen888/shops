const sequelize = require('../config/database');
const User = require('./User');
const Product = require('./Product');
const Purchase = require('./Purchase');
const Admin = require('./Admin');
const Notification = require('./Notification');
const PurchaseState = require('./PurchaseState');
const ReservedLine = require('./ReservedLine');

// –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
User.hasMany(Purchase, { foreignKey: 'userId' });
Purchase.belongsTo(User, { foreignKey: 'userId' });

Product.hasMany(Purchase, { foreignKey: 'productId' });
Purchase.belongsTo(Product, { foreignKey: 'productId' });

Admin.hasMany(Purchase, { foreignKey: 'confirmedBy' });
Purchase.belongsTo(Admin, { foreignKey: 'confirmedBy', as: 'ConfirmedByAdmin' });

User.hasMany(Notification, { foreignKey: 'userId' });
Notification.belongsTo(User, { foreignKey: 'userId' });

Admin.hasMany(Notification, { foreignKey: 'adminId' });
Notification.belongsTo(Admin, { foreignKey: 'adminId' });

// –°–≤—è–∑–∏ –¥–ª—è ReservedLine (–ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ï–ó–ï–†–í–ò–†–û–í–ê–ù–ò–Ø –°–¢–†–û–ö)
User.hasMany(ReservedLine, { foreignKey: 'userId' });
ReservedLine.belongsTo(User, { foreignKey: 'userId' });

Product.hasMany(ReservedLine, { foreignKey: 'productId' });
ReservedLine.belongsTo(Product, { foreignKey: 'productId' });

Purchase.hasMany(ReservedLine, { foreignKey: 'purchaseId' });
ReservedLine.belongsTo(Purchase, { foreignKey: 'purchaseId' });

// –°–≤—è–∑–∏ –¥–ª—è PurchaseState
User.hasMany(PurchaseState, { foreignKey: 'userId' });
PurchaseState.belongsTo(User, { foreignKey: 'userId' });

Product.hasMany(PurchaseState, { foreignKey: 'productId' });
PurchaseState.belongsTo(Product, { foreignKey: 'productId' });

async function syncModels() {
  try {
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∞—á–∞–ª–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã)
    await sequelize.sync({ force: false, alter: true });
    console.log('‚úÖ –ú–æ–¥–µ–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
    console.log('üÜï –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
    
    await createInitialAdmins();
    await printDatabaseStats();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π:', error);
    throw error;
  }
}

async function createInitialAdmins() {
  try {
    const adminIds = process.env.ADMIN_IDS.split(',').map(id => parseInt(id.trim()));
    
    for (const adminId of adminIds) {
      if (adminId && !isNaN(adminId)) {
        const [admin, created] = await Admin.findOrCreate({
          where: { telegramId: adminId },
          defaults: {
            telegramId: adminId,
            role: adminId === adminIds[0] ? 'super_admin' : 'admin',
            isActive: true,
            notifications: true
          }
        });
        
        if (created) {
          console.log(`üë®‚Äçüíº –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${adminId}`);
        }
      }
    }
    
    console.log(`‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã ${adminIds.length} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', error);
  }
}

async function printDatabaseStats() {
  try {
    const stats = {
      users: await User.count(),
      products: await Product.count(),
      purchases: await Purchase.count(),
      admins: await Admin.count(),
      reservedLines: await ReservedLine.count(),
      activeReserves: await ReservedLine.count({
        where: {
          status: 'reserved',
          reservedUntil: { [require('sequelize').Op.gt]: new Date() }
        }
      })
    };
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    console.log(`   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${stats.users}`);
    console.log(`   üì¶ –¢–æ–≤–∞—Ä—ã: ${stats.products}`);
    console.log(`   üõí –ü–æ–∫—É–ø–∫–∏: ${stats.purchases}`);
    console.log(`   üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: ${stats.admins}`);
    console.log(`   üìã –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫: ${stats.reservedLines}`);
    console.log(`   ‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–æ–≤: ${stats.activeReserves}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î:', error);
  }
}

// –•–µ–ª–ø–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑–µ—Ä–≤–∞–º–∏
const ReservationHelper = {
  // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserActiveReserves(userId) {
    return await ReservedLine.findAll({
      where: {
        userId,
        status: 'reserved',
        reservedUntil: { [require('sequelize').Op.gt]: new Date() }
      },
      include: [Product],
      order: [['createdAt', 'DESC']]
    });
  },

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
  async checkReservationConflicts(productId, lineIndices) {
    const conflicts = await ReservedLine.findAll({
      where: {
        productId,
        lineIndex: { [require('sequelize').Op.in]: lineIndices },
        status: 'reserved',
        reservedUntil: { [require('sequelize').Op.gt]: new Date() }
      },
      include: [User]
    });
    
    return conflicts;
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–≤–∞—Ä—É
  async getProductStats(productId) {
    const stats = await ReservedLine.getStatsByProduct(productId);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    const product = await Product.findByPk(productId);
    if (product && product.filePath) {
      try {
        const fs = require('fs').promises;
        const fileContent = await fs.readFile(product.filePath, 'utf8');
        const totalLines = fileContent.split('\n').filter(line => line.trim()).length;
        stats.availableLines = totalLines - stats.byStatus.sold;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ç–æ–≤–∞—Ä–∞:', error);
        stats.availableLines = 0;
      }
    }
    
    return stats;
  }
};

module.exports = {
  sequelize,
  User,
  Product,
  Purchase,
  Admin,
  Notification,
  PurchaseState,
  ReservedLine,
  ReservationHelper,
  syncModels
};